// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: User.proto

#include "User.pb.h"
#include "User.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TestGRPC {

static const char* UserService_method_names[] = {
  "/TestGRPC.UserService/GetUser",
  "/TestGRPC.UserService/GetUsersByRole",
  "/TestGRPC.UserService/AddUsers",
  "/TestGRPC.UserService/DeleteUsers",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUser_(UserService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsersByRole_(UserService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddUsers_(UserService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteUsers_(UserService_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status UserService::Stub::GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::TestGRPC::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TestGRPC::User>* UserService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TestGRPC::User>* UserService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, false);
}

::grpc::ClientReader< ::TestGRPC::User>* UserService::Stub::GetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::TestGRPC::User>::Create(channel_.get(), rpcmethod_GetUsersByRole_, context, request);
}

void UserService::Stub::experimental_async::GetUsersByRole(::grpc::ClientContext* context, ::TestGRPC::UserRole* request, ::grpc::experimental::ClientReadReactor< ::TestGRPC::User>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::TestGRPC::User>::Create(stub_->channel_.get(), stub_->rpcmethod_GetUsersByRole_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TestGRPC::User>* UserService::Stub::AsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_GetUsersByRole_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TestGRPC::User>* UserService::Stub::PrepareAsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_GetUsersByRole_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::TestGRPC::User>* UserService::Stub::AddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::TestGRPC::User>::Create(channel_.get(), rpcmethod_AddUsers_, context, response);
}

void UserService::Stub::experimental_async::AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::experimental::ClientWriteReactor< ::TestGRPC::User>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::TestGRPC::User>::Create(stub_->channel_.get(), stub_->rpcmethod_AddUsers_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::TestGRPC::User>* UserService::Stub::AsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_AddUsers_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::TestGRPC::User>* UserService::Stub::PrepareAsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::TestGRPC::User>::Create(channel_.get(), cq, rpcmethod_AddUsers_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* UserService::Stub::DeleteUsersRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>::Create(channel_.get(), rpcmethod_DeleteUsers_, context);
}

void UserService::Stub::experimental_async::DeleteUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteUsers_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* UserService::Stub::AsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>::Create(channel_.get(), cq, rpcmethod_DeleteUsers_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* UserService::Stub::PrepareAsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>::Create(channel_.get(), cq, rpcmethod_DeleteUsers_, context, false, nullptr);
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::TestGRPC::UserAccountName, ::TestGRPC::User>(
          std::mem_fn(&UserService::Service::GetUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UserService::Service, ::TestGRPC::UserRole, ::TestGRPC::User>(
          std::mem_fn(&UserService::Service::GetUsersByRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< UserService::Service, ::TestGRPC::User, ::TestGRPC::CommonCount>(
          std::mem_fn(&UserService::Service::AddUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< UserService::Service, ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>(
          std::mem_fn(&UserService::Service::DeleteUsers), this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::GetUser(::grpc::ServerContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetUsersByRole(::grpc::ServerContext* context, const ::TestGRPC::UserRole* request, ::grpc::ServerWriter< ::TestGRPC::User>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::AddUsers(::grpc::ServerContext* context, ::grpc::ServerReader< ::TestGRPC::User>* reader, ::TestGRPC::CommonCount* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DeleteUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TestGRPC

