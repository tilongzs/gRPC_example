// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: User.proto
#ifndef GRPC_User_2eproto__INCLUDED
#define GRPC_User_2eproto__INCLUDED

#include "User.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace TestGRPC {

class UserService final {
 public:
  static constexpr char const* service_full_name() {
    return "TestGRPC.UserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 根据用户名获取用户信息
    virtual ::grpc::Status GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::TestGRPC::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>> AsyncGetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    // 获取指定角色的所有用户信息
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TestGRPC::User>> GetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TestGRPC::User>>(GetUsersByRoleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>> AsyncGetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>>(AsyncGetUsersByRoleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>> PrepareAsyncGetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>>(PrepareAsyncGetUsersByRoleRaw(context, request, cq));
    }
    // 批量增加新用户，返回服务器用户总数
    std::unique_ptr< ::grpc::ClientWriterInterface< ::TestGRPC::User>> AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::TestGRPC::User>>(AddUsersRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>> AsyncAddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>>(AsyncAddUsersRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>> PrepareAsyncAddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>>(PrepareAsyncAddUsersRaw(context, response, cq));
    }
    // 批量删除用户，返回删除成功的用户名
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> DeleteUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(DeleteUsersRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> AsyncDeleteUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(AsyncDeleteUsersRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> PrepareAsyncDeleteUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(PrepareAsyncDeleteUsersRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 根据用户名获取用户信息
      virtual void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 获取指定角色的所有用户信息
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUsersByRole(::grpc::ClientContext* context, ::TestGRPC::UserRole* request, ::grpc::ClientReadReactor< ::TestGRPC::User>* reactor) = 0;
      #else
      virtual void GetUsersByRole(::grpc::ClientContext* context, ::TestGRPC::UserRole* request, ::grpc::experimental::ClientReadReactor< ::TestGRPC::User>* reactor) = 0;
      #endif
      // 批量增加新用户，返回服务器用户总数
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::ClientWriteReactor< ::TestGRPC::User>* reactor) = 0;
      #else
      virtual void AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::experimental::ClientWriteReactor< ::TestGRPC::User>* reactor) = 0;
      #endif
      // 批量删除用户，返回删除成功的用户名
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>* reactor) = 0;
      #else
      virtual void DeleteUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TestGRPC::User>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TestGRPC::User>* GetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>* AsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestGRPC::User>* PrepareAsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::TestGRPC::User>* AddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>* AsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TestGRPC::User>* PrepareAsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* DeleteUsersRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* AsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* PrepareAsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::TestGRPC::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>> AsyncGetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TestGRPC::User>> GetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TestGRPC::User>>(GetUsersByRoleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestGRPC::User>> AsyncGetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestGRPC::User>>(AsyncGetUsersByRoleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestGRPC::User>> PrepareAsyncGetUsersByRole(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestGRPC::User>>(PrepareAsyncGetUsersByRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::TestGRPC::User>> AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::TestGRPC::User>>(AddUsersRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestGRPC::User>> AsyncAddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestGRPC::User>>(AsyncAddUsersRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestGRPC::User>> PrepareAsyncAddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestGRPC::User>>(PrepareAsyncAddUsersRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> DeleteUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(DeleteUsersRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> AsyncDeleteUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(AsyncDeleteUsersRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>> PrepareAsyncDeleteUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>>(PrepareAsyncDeleteUsersRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetUser(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TestGRPC::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUsersByRole(::grpc::ClientContext* context, ::TestGRPC::UserRole* request, ::grpc::ClientReadReactor< ::TestGRPC::User>* reactor) override;
      #else
      void GetUsersByRole(::grpc::ClientContext* context, ::TestGRPC::UserRole* request, ::grpc::experimental::ClientReadReactor< ::TestGRPC::User>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::ClientWriteReactor< ::TestGRPC::User>* reactor) override;
      #else
      void AddUsers(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::experimental::ClientWriteReactor< ::TestGRPC::User>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>* reactor) override;
      #else
      void DeleteUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestGRPC::UserAccountName,::TestGRPC::UserAccountName>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TestGRPC::User>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::TestGRPC::UserAccountName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TestGRPC::User>* GetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request) override;
    ::grpc::ClientAsyncReader< ::TestGRPC::User>* AsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TestGRPC::User>* PrepareAsyncGetUsersByRoleRaw(::grpc::ClientContext* context, const ::TestGRPC::UserRole& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::TestGRPC::User>* AddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response) override;
    ::grpc::ClientAsyncWriter< ::TestGRPC::User>* AsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::TestGRPC::User>* PrepareAsyncAddUsersRaw(::grpc::ClientContext* context, ::TestGRPC::CommonCount* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* DeleteUsersRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* AsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* PrepareAsyncDeleteUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsersByRole_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 根据用户名获取用户信息
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response);
    // 获取指定角色的所有用户信息
    virtual ::grpc::Status GetUsersByRole(::grpc::ServerContext* context, const ::TestGRPC::UserRole* request, ::grpc::ServerWriter< ::TestGRPC::User>* writer);
    // 批量增加新用户，返回服务器用户总数
    virtual ::grpc::Status AddUsers(::grpc::ServerContext* context, ::grpc::ServerReader< ::TestGRPC::User>* reader, ::TestGRPC::CommonCount* response);
    // 批量删除用户，返回删除成功的用户名
    virtual ::grpc::Status DeleteUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::TestGRPC::UserAccountName* request, ::grpc::ServerAsyncResponseWriter< ::TestGRPC::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsersByRole() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersByRole(::grpc::ServerContext* context, ::TestGRPC::UserRole* request, ::grpc::ServerAsyncWriter< ::TestGRPC::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddUsers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestGRPC::User>* /*reader*/, ::TestGRPC::CommonCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::TestGRPC::CommonCount, ::TestGRPC::User>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUsers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUser<WithAsyncMethod_GetUsersByRole<WithAsyncMethod_AddUsers<WithAsyncMethod_DeleteUsers<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TestGRPC::UserAccountName, ::TestGRPC::User>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestGRPC::UserAccountName* request, ::TestGRPC::User* response) { return this->GetUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetUser(
        ::grpc::experimental::MessageAllocator< ::TestGRPC::UserAccountName, ::TestGRPC::User>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TestGRPC::UserAccountName, ::TestGRPC::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUsersByRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::TestGRPC::UserRole, ::TestGRPC::User>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestGRPC::UserRole* request) { return this->GetUsersByRole(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::TestGRPC::User>* GetUsersByRole(
      ::grpc::CallbackServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::TestGRPC::User>* GetUsersByRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::TestGRPC::User, ::TestGRPC::CommonCount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::TestGRPC::CommonCount* response) { return this->AddUsers(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_AddUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestGRPC::User>* /*reader*/, ::TestGRPC::CommonCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::TestGRPC::User>* AddUsers(
      ::grpc::CallbackServerContext* /*context*/, ::TestGRPC::CommonCount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::TestGRPC::User>* AddUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::TestGRPC::CommonCount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DeleteUsers(context); }));
    }
    ~ExperimentalWithCallbackMethod_DeleteUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* DeleteUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* DeleteUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetUser<ExperimentalWithCallbackMethod_GetUsersByRole<ExperimentalWithCallbackMethod_AddUsers<ExperimentalWithCallbackMethod_DeleteUsers<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetUser<ExperimentalWithCallbackMethod_GetUsersByRole<ExperimentalWithCallbackMethod_AddUsers<ExperimentalWithCallbackMethod_DeleteUsers<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsersByRole() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddUsers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestGRPC::User>* /*reader*/, ::TestGRPC::CommonCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUsers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsersByRole() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersByRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddUsers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestGRPC::User>* /*reader*/, ::TestGRPC::CommonCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUsers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUsersByRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetUsersByRole(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetUsersByRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetUsersByRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->AddUsers(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestGRPC::User>* /*reader*/, ::TestGRPC::CommonCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddUsers(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* AddUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DeleteUsers(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestGRPC::UserAccountName, ::TestGRPC::UserAccountName>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DeleteUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DeleteUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::TestGRPC::UserAccountName, ::TestGRPC::User>(std::bind(&WithStreamedUnaryMethod_GetUser<BaseClass>::StreamedGetUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserAccountName* /*request*/, ::TestGRPC::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TestGRPC::UserAccountName,::TestGRPC::User>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUser<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetUsersByRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetUsersByRole() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::TestGRPC::UserRole, ::TestGRPC::User>(std::bind(&WithSplitStreamingMethod_GetUsersByRole<BaseClass>::StreamedGetUsersByRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetUsersByRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsersByRole(::grpc::ServerContext* /*context*/, const ::TestGRPC::UserRole* /*request*/, ::grpc::ServerWriter< ::TestGRPC::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetUsersByRole(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TestGRPC::UserRole,::TestGRPC::User>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetUsersByRole<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUser<WithSplitStreamingMethod_GetUsersByRole<Service > > StreamedService;
};

}  // namespace TestGRPC


#endif  // GRPC_User_2eproto__INCLUDED
