// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: User.proto
// Protobuf C++ Version: 5.29.2

#ifndef User_2eproto_2epb_2eh
#define User_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_User_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_User_2eproto;
namespace TestGRPC {
class CommonMsg;
struct CommonMsgDefaultTypeInternal;
extern CommonMsgDefaultTypeInternal _CommonMsg_default_instance_;
class CommonNumber;
struct CommonNumberDefaultTypeInternal;
extern CommonNumberDefaultTypeInternal _CommonNumber_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserAccountName;
struct UserAccountNameDefaultTypeInternal;
extern UserAccountNameDefaultTypeInternal _UserAccountName_default_instance_;
class UserRole;
struct UserRoleDefaultTypeInternal;
extern UserRoleDefaultTypeInternal _UserRole_default_instance_;
}  // namespace TestGRPC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace TestGRPC {
enum Role : int {
  USER = 0,
  ADMIN = 1,
  Role_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Role_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Role_IsValid(int value);
extern const uint32_t Role_internal_data_[];
constexpr Role Role_MIN = static_cast<Role>(0);
constexpr Role Role_MAX = static_cast<Role>(1);
constexpr int Role_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Role_descriptor();
template <typename T>
const std::string& Role_Name(T value) {
  static_assert(std::is_same<T, Role>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Role_Name().");
  return Role_Name(static_cast<Role>(value));
}
template <>
inline const std::string& Role_Name(Role value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Role_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Role_Parse(absl::string_view name, Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Role>(
      Role_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserRole final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestGRPC.UserRole) */ {
 public:
  inline UserRole() : UserRole(nullptr) {}
  ~UserRole() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserRole* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserRole));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserRole(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserRole(const UserRole& from) : UserRole(nullptr, from) {}
  inline UserRole(UserRole&& from) noexcept
      : UserRole(nullptr, std::move(from)) {}
  inline UserRole& operator=(const UserRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRole& operator=(UserRole&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRole* internal_default_instance() {
    return reinterpret_cast<const UserRole*>(
        &_UserRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(UserRole& a, UserRole& b) { a.Swap(&b); }
  inline void Swap(UserRole* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRole* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRole* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserRole>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRole& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserRole& from) { UserRole::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserRole* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestGRPC.UserRole"; }

 protected:
  explicit UserRole(::google::protobuf::Arena* arena);
  UserRole(::google::protobuf::Arena* arena, const UserRole& from);
  UserRole(::google::protobuf::Arena* arena, UserRole&& from) noexcept
      : UserRole(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoleFieldNumber = 1,
  };
  // .TestGRPC.Role role = 1;
  void clear_role() ;
  ::TestGRPC::Role role() const;
  void set_role(::TestGRPC::Role value);

  private:
  ::TestGRPC::Role _internal_role() const;
  void _internal_set_role(::TestGRPC::Role value);

  public:
  // @@protoc_insertion_point(class_scope:TestGRPC.UserRole)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserRole& from_msg);
    int role_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class UserAccountName final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestGRPC.UserAccountName) */ {
 public:
  inline UserAccountName() : UserAccountName(nullptr) {}
  ~UserAccountName() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserAccountName* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserAccountName));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserAccountName(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserAccountName(const UserAccountName& from) : UserAccountName(nullptr, from) {}
  inline UserAccountName(UserAccountName&& from) noexcept
      : UserAccountName(nullptr, std::move(from)) {}
  inline UserAccountName& operator=(const UserAccountName& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAccountName& operator=(UserAccountName&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAccountName& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAccountName* internal_default_instance() {
    return reinterpret_cast<const UserAccountName*>(
        &_UserAccountName_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserAccountName& a, UserAccountName& b) { a.Swap(&b); }
  inline void Swap(UserAccountName* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAccountName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAccountName* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserAccountName>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserAccountName& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserAccountName& from) { UserAccountName::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserAccountName* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestGRPC.UserAccountName"; }

 protected:
  explicit UserAccountName(::google::protobuf::Arena* arena);
  UserAccountName(::google::protobuf::Arena* arena, const UserAccountName& from);
  UserAccountName(::google::protobuf::Arena* arena, UserAccountName&& from) noexcept
      : UserAccountName(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccountNameFieldNumber = 1,
  };
  // string accountName = 1;
  void clear_accountname() ;
  const std::string& accountname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_accountname(Arg_&& arg, Args_... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* value);

  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(
      const std::string& value);
  std::string* _internal_mutable_accountname();

  public:
  // @@protoc_insertion_point(class_scope:TestGRPC.UserAccountName)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserAccountName& from_msg);
    ::google::protobuf::internal::ArenaStringPtr accountname_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class User final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestGRPC.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(User* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(User));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User(
      ::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from) : User(nullptr, from) {}
  inline User(User&& from) noexcept
      : User(nullptr, std::move(from)) {}
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
        &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(User& a, User& b) { a.Swap(&b); }
  inline void Swap(User* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const User& from) { User::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(User* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestGRPC.User"; }

 protected:
  explicit User(::google::protobuf::Arena* arena);
  User(::google::protobuf::Arena* arena, const User& from);
  User(::google::protobuf::Arena* arena, User&& from) noexcept
      : User(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccountNameFieldNumber = 1,
    kAccountPWDFieldNumber = 2,
    kNickNameFieldNumber = 3,
    kAgeFieldNumber = 4,
    kUserRoleFieldNumber = 5,
  };
  // string accountName = 1;
  void clear_accountname() ;
  const std::string& accountname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_accountname(Arg_&& arg, Args_... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* value);

  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(
      const std::string& value);
  std::string* _internal_mutable_accountname();

  public:
  // string accountPWD = 2;
  void clear_accountpwd() ;
  const std::string& accountpwd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_accountpwd(Arg_&& arg, Args_... args);
  std::string* mutable_accountpwd();
  PROTOBUF_NODISCARD std::string* release_accountpwd();
  void set_allocated_accountpwd(std::string* value);

  private:
  const std::string& _internal_accountpwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountpwd(
      const std::string& value);
  std::string* _internal_mutable_accountpwd();

  public:
  // string nickName = 3;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // uint32 age = 4;
  void clear_age() ;
  ::uint32_t age() const;
  void set_age(::uint32_t value);

  private:
  ::uint32_t _internal_age() const;
  void _internal_set_age(::uint32_t value);

  public:
  // .TestGRPC.Role userRole = 5;
  void clear_userrole() ;
  ::TestGRPC::Role userrole() const;
  void set_userrole(::TestGRPC::Role value);

  private:
  ::TestGRPC::Role _internal_userrole() const;
  void _internal_set_userrole(::TestGRPC::Role value);

  public:
  // @@protoc_insertion_point(class_scope:TestGRPC.User)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const User& from_msg);
    ::google::protobuf::internal::ArenaStringPtr accountname_;
    ::google::protobuf::internal::ArenaStringPtr accountpwd_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::uint32_t age_;
    int userrole_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class CommonNumber final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestGRPC.CommonNumber) */ {
 public:
  inline CommonNumber() : CommonNumber(nullptr) {}
  ~CommonNumber() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommonNumber* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommonNumber));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommonNumber(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommonNumber(const CommonNumber& from) : CommonNumber(nullptr, from) {}
  inline CommonNumber(CommonNumber&& from) noexcept
      : CommonNumber(nullptr, std::move(from)) {}
  inline CommonNumber& operator=(const CommonNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonNumber& operator=(CommonNumber&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonNumber* internal_default_instance() {
    return reinterpret_cast<const CommonNumber*>(
        &_CommonNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CommonNumber& a, CommonNumber& b) { a.Swap(&b); }
  inline void Swap(CommonNumber* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonNumber* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonNumber* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommonNumber>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommonNumber& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommonNumber& from) { CommonNumber::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommonNumber* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestGRPC.CommonNumber"; }

 protected:
  explicit CommonNumber(::google::protobuf::Arena* arena);
  CommonNumber(::google::protobuf::Arena* arena, const CommonNumber& from);
  CommonNumber(::google::protobuf::Arena* arena, CommonNumber&& from) noexcept
      : CommonNumber(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumFieldNumber = 1,
  };
  // uint32 num = 1;
  void clear_num() ;
  ::uint32_t num() const;
  void set_num(::uint32_t value);

  private:
  ::uint32_t _internal_num() const;
  void _internal_set_num(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestGRPC.CommonNumber)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommonNumber& from_msg);
    ::uint32_t num_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class CommonMsg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestGRPC.CommonMsg) */ {
 public:
  inline CommonMsg() : CommonMsg(nullptr) {}
  ~CommonMsg() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommonMsg* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommonMsg));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommonMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommonMsg(const CommonMsg& from) : CommonMsg(nullptr, from) {}
  inline CommonMsg(CommonMsg&& from) noexcept
      : CommonMsg(nullptr, std::move(from)) {}
  inline CommonMsg& operator=(const CommonMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonMsg& operator=(CommonMsg&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonMsg* internal_default_instance() {
    return reinterpret_cast<const CommonMsg*>(
        &_CommonMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CommonMsg& a, CommonMsg& b) { a.Swap(&b); }
  inline void Swap(CommonMsg* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonMsg* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommonMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommonMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommonMsg& from) { CommonMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommonMsg* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestGRPC.CommonMsg"; }

 protected:
  explicit CommonMsg(::google::protobuf::Arena* arena);
  CommonMsg(::google::protobuf::Arena* arena, const CommonMsg& from);
  CommonMsg(::google::protobuf::Arena* arena, CommonMsg&& from) noexcept
      : CommonMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 2,
    kIsSucessFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // bool isSucess = 1;
  void clear_issucess() ;
  bool issucess() const;
  void set_issucess(bool value);

  private:
  bool _internal_issucess() const;
  void _internal_set_issucess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TestGRPC.CommonMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommonMsg& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    bool issucess_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// User

// string accountName = 1;
inline void User::clear_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& User::accountname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestGRPC.User.accountName)
  return _internal_accountname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_accountname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestGRPC.User.accountName)
}
inline std::string* User::mutable_accountname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.accountName)
  return _s;
}
inline const std::string& User::_internal_accountname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accountname_.Get();
}
inline void User::_internal_set_accountname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.accountname_.Mutable( GetArena());
}
inline std::string* User::release_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestGRPC.User.accountName)
  return _impl_.accountname_.Release();
}
inline void User::set_allocated_accountname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.accountName)
}

// string accountPWD = 2;
inline void User::clear_accountpwd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountpwd_.ClearToEmpty();
}
inline const std::string& User::accountpwd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestGRPC.User.accountPWD)
  return _internal_accountpwd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_accountpwd(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountpwd_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestGRPC.User.accountPWD)
}
inline std::string* User::mutable_accountpwd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_accountpwd();
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.accountPWD)
  return _s;
}
inline const std::string& User::_internal_accountpwd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accountpwd_.Get();
}
inline void User::_internal_set_accountpwd(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountpwd_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_accountpwd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.accountpwd_.Mutable( GetArena());
}
inline std::string* User::release_accountpwd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestGRPC.User.accountPWD)
  return _impl_.accountpwd_.Release();
}
inline void User::set_allocated_accountpwd(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountpwd_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accountpwd_.IsDefault()) {
    _impl_.accountpwd_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.accountPWD)
}

// string nickName = 3;
inline void User::clear_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& User::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestGRPC.User.nickName)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestGRPC.User.nickName)
}
inline std::string* User::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.nickName)
  return _s;
}
inline const std::string& User::_internal_nickname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_.Get();
}
inline void User::_internal_set_nickname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* User::release_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestGRPC.User.nickName)
  return _impl_.nickname_.Release();
}
inline void User::set_allocated_nickname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.nickName)
}

// uint32 age = 4;
inline void User::clear_age() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = 0u;
}
inline ::uint32_t User::age() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.age)
  return _internal_age();
}
inline void User::set_age(::uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.age)
}
inline ::uint32_t User::_internal_age() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.age_;
}
inline void User::_internal_set_age(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = value;
}

// .TestGRPC.Role userRole = 5;
inline void User::clear_userrole() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userrole_ = 0;
}
inline ::TestGRPC::Role User::userrole() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.userRole)
  return _internal_userrole();
}
inline void User::set_userrole(::TestGRPC::Role value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.userRole)
}
inline ::TestGRPC::Role User::_internal_userrole() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::TestGRPC::Role>(_impl_.userrole_);
}
inline void User::_internal_set_userrole(::TestGRPC::Role value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userrole_ = value;
}

// -------------------------------------------------------------------

// UserRole

// .TestGRPC.Role role = 1;
inline void UserRole::clear_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_ = 0;
}
inline ::TestGRPC::Role UserRole::role() const {
  // @@protoc_insertion_point(field_get:TestGRPC.UserRole.role)
  return _internal_role();
}
inline void UserRole::set_role(::TestGRPC::Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:TestGRPC.UserRole.role)
}
inline ::TestGRPC::Role UserRole::_internal_role() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::TestGRPC::Role>(_impl_.role_);
}
inline void UserRole::_internal_set_role(::TestGRPC::Role value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_ = value;
}

// -------------------------------------------------------------------

// UserAccountName

// string accountName = 1;
inline void UserAccountName::clear_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& UserAccountName::accountname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestGRPC.UserAccountName.accountName)
  return _internal_accountname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccountName::set_accountname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestGRPC.UserAccountName.accountName)
}
inline std::string* UserAccountName::mutable_accountname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:TestGRPC.UserAccountName.accountName)
  return _s;
}
inline const std::string& UserAccountName::_internal_accountname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accountname_.Get();
}
inline void UserAccountName::_internal_set_accountname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.Set(value, GetArena());
}
inline std::string* UserAccountName::_internal_mutable_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.accountname_.Mutable( GetArena());
}
inline std::string* UserAccountName::release_accountname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestGRPC.UserAccountName.accountName)
  return _impl_.accountname_.Release();
}
inline void UserAccountName::set_allocated_accountname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accountname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.UserAccountName.accountName)
}

// -------------------------------------------------------------------

// CommonMsg

// bool isSucess = 1;
inline void CommonMsg::clear_issucess() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issucess_ = false;
}
inline bool CommonMsg::issucess() const {
  // @@protoc_insertion_point(field_get:TestGRPC.CommonMsg.isSucess)
  return _internal_issucess();
}
inline void CommonMsg::set_issucess(bool value) {
  _internal_set_issucess(value);
  // @@protoc_insertion_point(field_set:TestGRPC.CommonMsg.isSucess)
}
inline bool CommonMsg::_internal_issucess() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.issucess_;
}
inline void CommonMsg::_internal_set_issucess(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issucess_ = value;
}

// string msg = 2;
inline void CommonMsg::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& CommonMsg::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestGRPC.CommonMsg.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonMsg::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestGRPC.CommonMsg.msg)
}
inline std::string* CommonMsg::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:TestGRPC.CommonMsg.msg)
  return _s;
}
inline const std::string& CommonMsg::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void CommonMsg::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* CommonMsg::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* CommonMsg::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestGRPC.CommonMsg.msg)
  return _impl_.msg_.Release();
}
inline void CommonMsg::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.CommonMsg.msg)
}

// -------------------------------------------------------------------

// CommonNumber

// uint32 num = 1;
inline void CommonNumber::clear_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ = 0u;
}
inline ::uint32_t CommonNumber::num() const {
  // @@protoc_insertion_point(field_get:TestGRPC.CommonNumber.num)
  return _internal_num();
}
inline void CommonNumber::set_num(::uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:TestGRPC.CommonNumber.num)
}
inline ::uint32_t CommonNumber::_internal_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_;
}
inline void CommonNumber::_internal_set_num(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TestGRPC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::TestGRPC::Role> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TestGRPC::Role>() {
  return ::TestGRPC::Role_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // User_2eproto_2epb_2eh
