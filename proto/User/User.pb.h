// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_User_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_User_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_User_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_User_2eproto;
namespace TestGRPC {
class CommonCount;
class CommonCountDefaultTypeInternal;
extern CommonCountDefaultTypeInternal _CommonCount_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserAccountName;
class UserAccountNameDefaultTypeInternal;
extern UserAccountNameDefaultTypeInternal _UserAccountName_default_instance_;
class UserRole;
class UserRoleDefaultTypeInternal;
extern UserRoleDefaultTypeInternal _UserRole_default_instance_;
}  // namespace TestGRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::TestGRPC::CommonCount* Arena::CreateMaybeMessage<::TestGRPC::CommonCount>(Arena*);
template<> ::TestGRPC::User* Arena::CreateMaybeMessage<::TestGRPC::User>(Arena*);
template<> ::TestGRPC::UserAccountName* Arena::CreateMaybeMessage<::TestGRPC::UserAccountName>(Arena*);
template<> ::TestGRPC::UserRole* Arena::CreateMaybeMessage<::TestGRPC::UserRole>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TestGRPC {

enum Role : int {
  USER = 0,
  ADMIN = 1,
  Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Role_IsValid(int value);
constexpr Role Role_MIN = USER;
constexpr Role Role_MAX = ADMIN;
constexpr int Role_ARRAYSIZE = Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor();
template<typename T>
inline const std::string& Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Role_descriptor(), enum_t_value);
}
inline bool Role_Parse(
    const std::string& name, Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Role>(
    Role_descriptor(), name, value);
}
// ===================================================================

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestGRPC.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestGRPC.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kAccountPWDFieldNumber = 2,
    kNickNameFieldNumber = 3,
    kAgeFieldNumber = 4,
    kUserRoleFieldNumber = 5,
  };
  // string accountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string accountPWD = 2;
  void clear_accountpwd();
  const std::string& accountpwd() const;
  void set_accountpwd(const std::string& value);
  void set_accountpwd(std::string&& value);
  void set_accountpwd(const char* value);
  void set_accountpwd(const char* value, size_t size);
  std::string* mutable_accountpwd();
  std::string* release_accountpwd();
  void set_allocated_accountpwd(std::string* accountpwd);
  private:
  const std::string& _internal_accountpwd() const;
  void _internal_set_accountpwd(const std::string& value);
  std::string* _internal_mutable_accountpwd();
  public:

  // string nickName = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // uint32 age = 4;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TestGRPC.Role userRole = 5;
  void clear_userrole();
  ::TestGRPC::Role userrole() const;
  void set_userrole(::TestGRPC::Role value);
  private:
  ::TestGRPC::Role _internal_userrole() const;
  void _internal_set_userrole(::TestGRPC::Role value);
  public:

  // @@protoc_insertion_point(class_scope:TestGRPC.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountpwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  int userrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class UserRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestGRPC.UserRole) */ {
 public:
  UserRole();
  virtual ~UserRole();

  UserRole(const UserRole& from);
  UserRole(UserRole&& from) noexcept
    : UserRole() {
    *this = ::std::move(from);
  }

  inline UserRole& operator=(const UserRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRole& operator=(UserRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRole* internal_default_instance() {
    return reinterpret_cast<const UserRole*>(
               &_UserRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRole& a, UserRole& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRole* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRole* New() const final {
    return CreateMaybeMessage<UserRole>(nullptr);
  }

  UserRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRole& from);
  void MergeFrom(const UserRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestGRPC.UserRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .TestGRPC.Role role = 1;
  void clear_role();
  ::TestGRPC::Role role() const;
  void set_role(::TestGRPC::Role value);
  private:
  ::TestGRPC::Role _internal_role() const;
  void _internal_set_role(::TestGRPC::Role value);
  public:

  // @@protoc_insertion_point(class_scope:TestGRPC.UserRole)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class UserAccountName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestGRPC.UserAccountName) */ {
 public:
  UserAccountName();
  virtual ~UserAccountName();

  UserAccountName(const UserAccountName& from);
  UserAccountName(UserAccountName&& from) noexcept
    : UserAccountName() {
    *this = ::std::move(from);
  }

  inline UserAccountName& operator=(const UserAccountName& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAccountName& operator=(UserAccountName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAccountName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAccountName* internal_default_instance() {
    return reinterpret_cast<const UserAccountName*>(
               &_UserAccountName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserAccountName& a, UserAccountName& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAccountName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAccountName* New() const final {
    return CreateMaybeMessage<UserAccountName>(nullptr);
  }

  UserAccountName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAccountName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAccountName& from);
  void MergeFrom(const UserAccountName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAccountName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestGRPC.UserAccountName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
  };
  // string accountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // @@protoc_insertion_point(class_scope:TestGRPC.UserAccountName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class CommonCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestGRPC.CommonCount) */ {
 public:
  CommonCount();
  virtual ~CommonCount();

  CommonCount(const CommonCount& from);
  CommonCount(CommonCount&& from) noexcept
    : CommonCount() {
    *this = ::std::move(from);
  }

  inline CommonCount& operator=(const CommonCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonCount& operator=(CommonCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonCount* internal_default_instance() {
    return reinterpret_cast<const CommonCount*>(
               &_CommonCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommonCount& a, CommonCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonCount* New() const final {
    return CreateMaybeMessage<CommonCount>(nullptr);
  }

  CommonCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonCount& from);
  void MergeFrom(const CommonCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestGRPC.CommonCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestGRPC.CommonCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_User_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string accountName = 1;
inline void User::clear_accountname() {
  accountname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::accountname() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.accountName)
  return _internal_accountname();
}
inline void User::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.accountName)
}
inline std::string* User::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.accountName)
  return _internal_mutable_accountname();
}
inline const std::string& User::_internal_accountname() const {
  return accountname_.GetNoArena();
}
inline void User::_internal_set_accountname(const std::string& value) {
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_accountname(std::string&& value) {
  
  accountname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestGRPC.User.accountName)
}
inline void User::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestGRPC.User.accountName)
}
inline void User::set_accountname(const char* value, size_t size) {
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestGRPC.User.accountName)
}
inline std::string* User::_internal_mutable_accountname() {
  
  return accountname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_accountname() {
  // @@protoc_insertion_point(field_release:TestGRPC.User.accountName)
  
  return accountname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname);
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.accountName)
}

// string accountPWD = 2;
inline void User::clear_accountpwd() {
  accountpwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::accountpwd() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.accountPWD)
  return _internal_accountpwd();
}
inline void User::set_accountpwd(const std::string& value) {
  _internal_set_accountpwd(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.accountPWD)
}
inline std::string* User::mutable_accountpwd() {
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.accountPWD)
  return _internal_mutable_accountpwd();
}
inline const std::string& User::_internal_accountpwd() const {
  return accountpwd_.GetNoArena();
}
inline void User::_internal_set_accountpwd(const std::string& value) {
  
  accountpwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_accountpwd(std::string&& value) {
  
  accountpwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestGRPC.User.accountPWD)
}
inline void User::set_accountpwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountpwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestGRPC.User.accountPWD)
}
inline void User::set_accountpwd(const char* value, size_t size) {
  
  accountpwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestGRPC.User.accountPWD)
}
inline std::string* User::_internal_mutable_accountpwd() {
  
  return accountpwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_accountpwd() {
  // @@protoc_insertion_point(field_release:TestGRPC.User.accountPWD)
  
  return accountpwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_accountpwd(std::string* accountpwd) {
  if (accountpwd != nullptr) {
    
  } else {
    
  }
  accountpwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountpwd);
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.accountPWD)
}

// string nickName = 3;
inline void User::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::nickname() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.nickName)
  return _internal_nickname();
}
inline void User::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.nickName)
}
inline std::string* User::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:TestGRPC.User.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& User::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void User::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestGRPC.User.nickName)
}
inline void User::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestGRPC.User.nickName)
}
inline void User::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestGRPC.User.nickName)
}
inline std::string* User::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_nickname() {
  // @@protoc_insertion_point(field_release:TestGRPC.User.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.User.nickName)
}

// uint32 age = 4;
inline void User::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::age() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.age)
  return _internal_age();
}
inline void User::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void User::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.age)
}

// .TestGRPC.Role userRole = 5;
inline void User::clear_userrole() {
  userrole_ = 0;
}
inline ::TestGRPC::Role User::_internal_userrole() const {
  return static_cast< ::TestGRPC::Role >(userrole_);
}
inline ::TestGRPC::Role User::userrole() const {
  // @@protoc_insertion_point(field_get:TestGRPC.User.userRole)
  return _internal_userrole();
}
inline void User::_internal_set_userrole(::TestGRPC::Role value) {
  
  userrole_ = value;
}
inline void User::set_userrole(::TestGRPC::Role value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:TestGRPC.User.userRole)
}

// -------------------------------------------------------------------

// UserRole

// .TestGRPC.Role role = 1;
inline void UserRole::clear_role() {
  role_ = 0;
}
inline ::TestGRPC::Role UserRole::_internal_role() const {
  return static_cast< ::TestGRPC::Role >(role_);
}
inline ::TestGRPC::Role UserRole::role() const {
  // @@protoc_insertion_point(field_get:TestGRPC.UserRole.role)
  return _internal_role();
}
inline void UserRole::_internal_set_role(::TestGRPC::Role value) {
  
  role_ = value;
}
inline void UserRole::set_role(::TestGRPC::Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:TestGRPC.UserRole.role)
}

// -------------------------------------------------------------------

// UserAccountName

// string accountName = 1;
inline void UserAccountName::clear_accountname() {
  accountname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAccountName::accountname() const {
  // @@protoc_insertion_point(field_get:TestGRPC.UserAccountName.accountName)
  return _internal_accountname();
}
inline void UserAccountName::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:TestGRPC.UserAccountName.accountName)
}
inline std::string* UserAccountName::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:TestGRPC.UserAccountName.accountName)
  return _internal_mutable_accountname();
}
inline const std::string& UserAccountName::_internal_accountname() const {
  return accountname_.GetNoArena();
}
inline void UserAccountName::_internal_set_accountname(const std::string& value) {
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserAccountName::set_accountname(std::string&& value) {
  
  accountname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestGRPC.UserAccountName.accountName)
}
inline void UserAccountName::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestGRPC.UserAccountName.accountName)
}
inline void UserAccountName::set_accountname(const char* value, size_t size) {
  
  accountname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestGRPC.UserAccountName.accountName)
}
inline std::string* UserAccountName::_internal_mutable_accountname() {
  
  return accountname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAccountName::release_accountname() {
  // @@protoc_insertion_point(field_release:TestGRPC.UserAccountName.accountName)
  
  return accountname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountName::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname);
  // @@protoc_insertion_point(field_set_allocated:TestGRPC.UserAccountName.accountName)
}

// -------------------------------------------------------------------

// CommonCount

// uint32 count = 1;
inline void CommonCount::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonCount::count() const {
  // @@protoc_insertion_point(field_get:TestGRPC.CommonCount.count)
  return _internal_count();
}
inline void CommonCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void CommonCount::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TestGRPC.CommonCount.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestGRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TestGRPC::Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TestGRPC::Role>() {
  return ::TestGRPC::Role_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_User_2eproto
